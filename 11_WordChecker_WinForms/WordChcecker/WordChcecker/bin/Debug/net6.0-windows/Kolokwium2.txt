1) (5 punktow):
---------------
Prosze uzupelnic luki w ponizszej tabeli wpisujac TAK, w przypadku, gdy dana anomalia wspolbieznego dostepu MOZE wystepowac na okreslonym poziomie izolacji transakcji, badz NIE, w momencie, gdy dana anomalia wspolbieznego dostepu NIE MOZE wystepowac na okreslonym poziomie izolacji transakcji.

                   +---------+-------------+----------------+--------+
                   | Fantomy | Utracona    | Niepowtarzalny | Brudny |
                   |         | modyfikacja | odczyt         | odczyt |  
+------------------+---------+-------------+----------------+--------+
| SERIALIZABLE     | 1       | 2           | 3              | 4      |
+------------------+---------+-------------+----------------+--------+
| REPEATABLE READ  | 5       | 6           | 7              | 8      |
+------------------+---------+-------------+----------------+--------+
| READ COMMITTED   | 9       | 10          | 11             | 12     |
+------------------+---------+-------------+----------------+--------+
| READ UNCOMMITTED | 13      | 14          | 15             | 16     |
+------------------+---------+-------------+----------------+--------+
| SNAPSHOT         | 17      | 18          | 19             | 20     |
+------------------+---------+-------------+----------------+--------+

######################################################################

2) (2 punkty):
--------------
Prosze wymienic wlasnosci ACID, ktore musza spelniac transakcje w systemach zarzadzania bazami danych.

######################################################################################################

3) (7 punktow (za uzupelnienie luk o numerach od 1 do 14) + 2 punkty (za uzupelnienie luki numer 15)):
------------------------------------------------------------------------------------------------------
Przypuscmy, ze dana jest tabela o nazwie "Gadzina", ktora zostala utworzona za pomoca nastepujacej kwerendy:

CREATE TABLE Gadzina (
	numer INT PRIMARY KEY,
	miano VARCHAR(256)
)

Zakladajac, ze ponizsze instrukcje wykonywane sa POJEDYNCZO, zas dostarczony fragment kodu NIE STANOWI elementu ZADNEJ istniejacej transakcji, przy zalozeniu, ze w przypadku braku ustawienia wartosci KTOREJKOLWIEK z opcji SQL Servera w dostarczonym fragmencie kodu za pomoca polecenia SET przyjmowane sa ich wartości DOMYSLNE, prosze uzupelnic kazda z luk o numerach od 1 do 14 wartosciami wypisanymi na wyjscie przez funkcje PRINT znajdujace sie w poszczegolnych fragmentach kodu. W przypadku luki nr 15 prosze podac liczbe wierszy, ktore zawiera tabela stanowiaca wynik dzialania kwerendy SELECT zawartej w dostarczonym fragmencie kodu.

Uwaga!
* Dopuszczamy sytuacje, w ktorej polecenia: COMMIT oraz ROLLBACK moga byc uzyte w niewlasciwym kontekscie, co powoduje wyswietlenie odpowiedniego ostrzezenia przez SQL Server;

----------------------------------------------------

SET IMPLICIT_TRANSACTIONS ON              |
SET XACT_ABORT OFF                        |
PRINT @@TRANCOUNT                         | [  1   ]
INSERT INTO Gadzina VALUES (1, 'Pultok')  |
PRINT @@TRANCOUNT                         | [  2   ]
ROLLBACK                                  |  
PRINT @@TRANCOUNT                         | [  3   ]
INSERT INTO Gadzina VALUES (2, 'Yjzel')   |
PRINT @@TRANCOUNT                         | [  4   ]
BEGIN TRANSACTION                         |
PRINT @@TRANCOUNT                         | [  5   ]
INSERT INTO Gadzina VALUES (3, 'Ciga')    |
PRINT @@TRANCOUNT                         | [  6   ]
BEGIN TRANSACTION                         |
PRINT @@TRANCOUNT                         | [  7   ]
INSERT INTO Gadzina VALUES (4, 'Kalymba') |
PRINT @@TRANCOUNT                         | [  8   ]
COMMIT                                    |
PRINT @@TRANCOUNT                         | [  9   ]
INSERT INTO Gadzina VALUES (1, 'Kormik')  |
PRINT @@TRANCOUNT                         | [  10  ]
INSERT INTO Gadzina VALUES (5, 'Kormik')  |
PRINT @@TRANCOUNT                         | [  11  ]
ROLLBACK                                  | 
PRINT @@TRANCOUNT                         | [  12  ]
SELECT * FROM Gadzina                     | 
PRINT @@TRANCOUNT                         | [  13  ]
COMMIT                                    |
PRINT @@TRANCOUNT                         | [  14  ]

----------------------------------------------------

Ile wierszy zawiera tabela stanowiaca wynik dzialania ostatniej kwerendy SELECT? [  15  ]

#########################################################################################

4) (7 punktow):
---------------
Dla tabeli o nazwie "Gadzina" z zadania numer 3 prosze uzupelnic kazda z ponizszych luk POJEDYNCZYM slowem (tzn. slowem nie zawierajacym spacji) w taki sposob, aby znajdujacy sie ponizej fragment kodu definiowal, a nastepnie testowal dzialanie 3 wyzwalaczy o nazwach: Tr_INSTEAD_OF_INSERT, Tr_INSTEAD_OF_DELETE oraz Tr_INSTEAD_OF_UPDATE, ktore oprocz finalizacji operacji (odpowiednio:) dodawania, usuwania oraz modyfikacji wierszy w tabeli o nazwie "Gadzina" wypisza STOSOWNY komunikat informujacy o typie operacji, ktora spowodowala uruchomienie danego wyzwalacza.

Uwaga!
* Dopuszczamy sytuacje, w ktorej niektore sposrod luk moga pozostac PUSTE. W powyzszym przypadku prosze, aby na karcie z Panstwa rozwiazaniem obok numeru zadanej luki pozostawic PUSTE MIEJSCE;

----------------------

CREATE TABLE Gadzina (
	numer INT PRIMARY KEY,
	miano VARCHAR(256)
)

[  1   ]

[  2   ] [  3   ] [  4   ] [  5   ] [  6   ]
[  7   ] [  8   ] [  9   ]
[  10  ]
	DELETE [  11  ] FROM [  12  ] [  13  ]
	WHERE ([  14  ] [  15  ] (
		SELECT * FROM [  16  ] B
		WHERE (A.numer = [  17  ])
	))

	INSERT INTO [  18  ]
	SELECT * FROM [  19  ]

	PRINT 'Uaktualniono wiersze w tabeli Gadzina... .'

[  20  ]

[  21  ] [  22  ] [  23  ] [  24  ] [  25  ]
[  26  ] [  27  ] [  28  ]
[  29  ]
	DELETE [  30  ] FROM [  31  ] [  32  ]
	WHERE ([  33  ] [  34  ] (
		SELECT * FROM [  35  ] B
		WHERE (A.numer = [  36  ])
	))

	PRINT 'Usunieto wiersze z tabeli Gadzina... .'
	
[  37  ]

[  38  ] [  39  ] [  40  ] [  41  ] [  42  ]
[  43  ] [  44  ] [  45  ]
[  46  ]
	INSERT INTO [  47  ]
	SELECT * FROM [  48  ]

	PRINT 'Wstawiono wiersze do tabeli Gadzina... .'
	
[  49  ]

INSERT INTO Gadzina VALUES (1, 'Pultok'), (2, 'Yjzel')
UPDATE Gadzina SET miano = 'Ciga' WHERE (numer = 2)
DELETE FROM Gadzina WHERE (numer = 2)

#####################################

5) (7 punktow):
---------------
W bazie danych przeznaczonej do obslugi sieci stacji pogodowych znajduje sie tabela Data zawierajaca miedzy innymi nastepujace atrybuty:
* readingID INT IDENTITY(1,1) - identyfikator odczytu;
* temperature_<Country>_<City> FLOAT - ZBIOR atrybutow odpowiadajacych odczytom temperatury wyrazonej w stopniach Celsjusza w kraju <Country> oraz miescie <City> dla wszystkich miast lezacych w danym kraju, w ktorych znajduje sie stacja pogodowa (zakladamy, ze w jednym miescie moze znajdowac sie wylacznie jedna stacja pogodowa);

Przy zalozeniu, ze odczyty w kazdej ze stacji pogodowych wykonywane sa CO GODZINE, prosze uzupelnic kazda z ponizszych luk POJEDYNCZYM slowem (tzn. slowem nie zawierajacym spacji) w taki sposob, aby znajdujacy sie ponizej fragment kodu definiowal, a nastepnie testowal dzialanie procedury skladowanej o nazwie "MinPeriodInDaysWithTemperatureGreaterThan", ktora dla argumentow: [value], [country], [city] oraz [r] wyznacza dlugosc (liczona w dobach) MINIMALNEGO CIAGLEGO okresu czasu, w ktorym temperatura odczytana przez stacje pogodowa znajdujaca sie w kraju <country> oraz miescie <city> była wyzsza niz <value> stopni Celsjusza, przy czym (w tejze samej procedurze skladowanej) odczytane wartosci temperatury sa "wygladzane" za pomoca filtru "srednich kroczacych" o promieniu jadra rownym r. Wyznaczona dlugosc okresu procedura skladowana ma zwracac w argumencie przez "referencje" o nazwie [minPeriodLengthInDays]. Przyjmujemy, ze pojedyncza wartosc odczytu temperatury x (oczywiscie po dokonaniu przeksztalcenia zbioru odczytow za pomoca filtru "srednich kroczacych") oznacza, ze w okresie od pol godziny przed do pol godziny po wykonaniu odczytu (czyli przez godzine) temperatura w danym miejscu miala wartosc rowna x.

Dla ciagu o wyrazach rzeczywistych {X1,...,Xn} srednia kroczaca tego ciagu o promieniu jadra rownym r nazywamy przeksztalcenie, ktore przyporzadkowuje powyzszemu ciagowi ciag o wyrazach rzeczywistych {Y1,...,Yn}, ktorego kazdy element Yi zadany jest w nastepujacy sposob:

Yi = (X[i-r]+...+X[i]+...+X[i+r]) / (2r+1), przy czym Xi=X1 (gdy i < 1) oraz Xi=Xn (gdy i > n), tzn. nastepuje powtorzenie elementow brzegowych w momencie, gdy okna jadra "wychodzi poza nasz ciag".

-------------------

CREATE TABLE Data (
	readingID INT IDENTITY(1, 1),
	temperature_Poland_Cracow FLOAT
)

INSERT INTO Data VALUES (10),(12),(16),(24),(24),(24),(24),(16),(12),(10)

[  1   ]
[  2   ] [  3   ] MinPeriodInDaysWithTemperatureGreaterThan (
	@value FLOAT,
	@country VARCHAR(256),
	@city VARCHAR(256),
	@r INT,
	@minPeriodLengthInDays FLOAT [  4   ]
) [  5   ]
	[  6   ] record CURSOR [  7   ]
		SELECT readingID FROM Data
	DECLARE @readingID INT
	DECLARE @rowsNum INT
	SET @rowsNum = (SELECT COUNT(*) FROM Data)
	DECLARE @periodLength INT
	DECLARE @minPeriodLength INT
	SET @periodLength = 0
	SET @minPeriodLength = 0
	[  8   ] [  9   ]

	[  10  ] record [  11  ] @readingID
	WHILE ([  12 ] = [  13  ]) BEGIN
		DECLARE @indexLo INT
		DECLARE @indexHi INT
		SET @indexLo = @readingID - @r
		SET @indexHi = @readingID + @r
		DECLARE @query NVARCHAR(256)
		DECLARE @queryParamsDeclaration NVARCHAR(256)
		DECLARE @sum FLOAT
		SET @sum = 0
		IF (@indexHi > @rowsNum) BEGIN
			DECLARE @lastReading FLOAT
			SET @query = 'SET @a = (SELECT TOP 1 temperature_' +
				@country +
				'_' +
				@city +
				' FROM Data ORDER BY readingID [  14  ])'
			SET @queryParamsDeclaration = '@a FLOAT [  15  ]'
			[  16  ] [  17  ] @query, @queryParamsDeclaration, [  18  ] [  19  ] @lastReading [  20  ]
			SET @sum = @sum + ((@indexHi - @rowsNum) * @lastReading)
			SET @indexHi = @rowsNum
		END
		IF (@indexLo < 1) BEGIN
			DECLARE @firstReading FLOAT
			SET @query = 'SET @a = (SELECT TOP 1 temperature_' +
				@country +
				'_' +
				@city +
				' FROM Data ORDER BY readingID [  21  ])'
			SET @queryParamsDeclaration = '@a FLOAT [  22  ]'
			[  23  ] [  24  ] @query, @queryParamsDeclaration, [  25  ] [  26  ] @firstReading [  27  ]
			SET @sum = @sum + ((1 - @indexLo) * @firstReading)
			SET @indexLo = 1
		END
		SET @query = 'SET @a = (SELECT SUM(temperature_' +
			@country +
			'_' +
			@city +
			') FROM Data WHERE readingID BETWEEN @b AND @c)'
		SET @queryParamsDeclaration = '@a FLOAT [  28  ], @b INT, @c INT'
		DECLARE @partialSum FLOAT
		[  29  ] [  30  ] @query, @queryParamsDeclaration, [  31  ] [  32  ] @partialSum [  33  ], [  34  ] [  35  ] @indexLo, [  36  ] [  37  ] @indexHi
		SET @sum = @sum + @partialSum
		DECLARE @average FLOAT
		SET @average = @sum / [  38  ]
		IF (@average > @value)
			SET @periodLength = @periodLength + 1
		ELSE BEGIN
			IF ((@periodLength < @minPeriodLength) AND (@periodLength > 0)) SET @minPeriodLength = @periodLength
			SET @periodLength = 0
		END

		[  39  ] record [  40  ] @readingID
	END

	/* Zamykamy kursor, PO CZYM zwalniamy przydzielone mu zasoby */
	[  41  ] record
	[  42  ] record
	IF ((@periodLength < @minPeriodLength) AND (@periodLength > 0)) SET @minPeriodLength = @periodLength
	IF ((@minPeriodLength = @rowsNum) AND (@periodLength = 0)) SET @minPeriodLength = 0
	SET @minPeriodLengthInDays = @minPeriodLength / [  43  ]
[  44  ]

DECLARE @minPeriodLengthInDays FLOAT
[  45  ] MinPeriodInDaysWithTemperatureGreaterThan
	[  46  ] [  47  ] 20.0,
	[  48  ] [  49  ] 'Poland',
	[  50  ] [  51  ] 'Cracow',
	[  52  ] [  53  ] 0,
	[  54  ] [  55  ] @minPeriodLengthInDays [  56  ]
PRINT @minPeriodLengthInDays